{"mappings":"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","sources":["node_modules/seedrandom/lib/alea.js","node_modules/seedrandom/lib/xor128.js","node_modules/seedrandom/lib/xorwow.js","node_modules/seedrandom/lib/xorshift7.js","node_modules/seedrandom/lib/xor4096.js","node_modules/seedrandom/lib/tychei.js","node_modules/seedrandom/index.js","node_modules/seedrandom/seedrandom.js","src/rand.ts","src/postprocessing.ts","src/settings.ts","src/weightedChoice.ts","src/evalApi.ts","src/stringUtils.ts","src/errors.ts","src/userDefs.ts","src/evalBlock.ts","src/tokenType.ts","src/choiceFork.ts","src/reference.ts","src/parsers.ts","src/token.ts","src/lexer.ts","src/renderer.ts","src/browserIndex.js"],"sourcesContent":["// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\n// Detect the global object, even if operating in strict mode.\n// http://stackoverflow.com/a/14387057/265298\nvar global = (0, eval)('this'),\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","import { WeightedChoice, Choice } from './weightedChoice';\nimport seedrandom from 'seedrandom';\n\n// A module-local seedable random number generator\n// The selected seed will be random unless `setRandomSeed()` is called.\nlet rng = seedrandom();\n\nexport function setRandomSeed(seed: number) {\n  rng = seedrandom(seed);\n}\n\nexport function normalizeWeights(weightedChoices: WeightedChoice[]): WeightedChoice[] {\n  let normalized = [];\n  let sum = 0;\n  let nullWeightCount = 0;\n  for (let w = 0; w < weightedChoices.length; w++) {\n    let weightedChoice = weightedChoices[w];\n    normalized.push(weightedChoice.clone());\n    if (weightedChoice.weight === null) {\n      nullWeightCount++;\n    } else {\n      sum += weightedChoice.weight;\n    }\n  }\n  let nullWeight = (100 - sum) / nullWeightCount;\n  for (let n = 0; n < normalized.length; n++) {\n    if (normalized[n].weight === null) {\n      normalized[n].weight = nullWeight;\n    }\n  }\n  return normalized;\n}\n\nexport function randomFloat(min: number, max: number): number {\n  return (rng() * (max - min)) + min;\n}\n\nexport function randomInt(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min)) + min;\n}\n\n/**\n * Randomly choose from an array of weighted choices.\n *\n * The probability of any given `WeightedChoice` being\n * chosen is its weight divided by the sum of all given\n * choices.\n *\n * Returns an object of the form {choice, choiceIndex}\n */\nexport function weightedChoose(weights: WeightedChoice[]): { choice: Choice, choiceIndex: number } {\n  let sum = 0;\n  for (let wc of weights) {\n    sum += wc.weight ?? 0;\n  }\n  let progress = 0;\n  let pickedValue = randomFloat(0, sum);\n  for (let i = 0; i < weights.length; i++) {\n    let wc = weights[i];\n    progress += wc.weight ?? 0;\n    if (progress >= pickedValue) {\n      return { choice: wc.choice, choiceIndex: i };\n    }\n  }\n  // If we're still here, something went wrong.\n  // Log a warning but try to return a random value anyways.\n  console.warn('Unable to pick weighted choice for weights: ' + weights);\n  let fallbackIndex = randomInt(0, weights.length);\n  return { choice: weights[fallbackIndex].choice, choiceIndex: fallbackIndex };\n}\n\n","const BLANK_LINE_RE = /^\\s*$/;\nconst TRAILING_WHITESPACE_RE = /\\s+$/;\n\n/**\n * Cleans whitespace in the given text by:\n * 1. Removing all trailing whitespace in every line\n * 2. Collapsing any runs of over 1 blank line\n * 3. Collapsing any runs of over 1 space in the middle of a line.\n * 4. Removing blank lines at the start of the text\n * 5. Ensuring the text ends with a single line break\n */\nexport function whitespaceCleanup(text: string): string {\n  let out = '';\n  let atDocStart = true;\n  let lastLineWasBlank = false;\n  for (let line of text.split('\\n')) {\n    let isBlank = BLANK_LINE_RE.test(line);\n\n    if (atDocStart) {\n      if (isBlank) {\n        // Skip blank lines at start of document\n        continue;\n      } else {\n        atDocStart = false;\n      }\n    }\n\n    if (isBlank) {\n      if (lastLineWasBlank) {\n        // Skip runs of blank lines\n        continue;\n      }\n      // Lines consisting of only whitespace should\n      // become simply blank lines\n      line = '';\n    } else {\n      // intra-line cleanups\n      line = line.replace(TRAILING_WHITESPACE_RE, '');\n      let rewrittenLine = '';\n      let atLineStart = true;\n      let lastCharWasSpace = false;\n      for (let char of line) {\n        let charIsSpace = char === ' ';\n        if (!atLineStart && lastCharWasSpace && charIsSpace) {\n          continue;\n        } else {\n          if (!charIsSpace) {\n            atLineStart = false;\n          }\n          rewrittenLine += char;\n          lastCharWasSpace = charIsSpace;\n        }\n      }\n      line = rewrittenLine;\n    }\n\n    lastLineWasBlank = isBlank;\n\n    out += line + '\\n';\n  }\n\n  // Edge case: if input ended with a line break already, above code\n  // will result in \\n\\n ending the output. Correct this so output\n  // always terminates with a single \\n\n  if (out.endsWith('\\n\\n')) {\n    out = out.substring(0, out.length - 1);\n  }\n\n  return out;\n}\n\nconst MISPLACED_WORD_ENDING_PUNC_RE = /(\\w)(\\s+)([.,:;!?]+)/g;\n\n/**\n * Performs simple English-like correction of whitespace around\n * punctuation marks.\n *\n * - snap [, . : ; ! ?] to the end of preceding words when separated\n *   by whitespace (including line breaks.)\n */\nexport function punctuationCleanup(text: string): string {\n  return text.replace(MISPLACED_WORD_ENDING_PUNC_RE, '$1$3$2');\n}\n\n\n// \\p{Ll} matches unicode lowercase letters which have uppercase variants.\nconst INCORRECT_CAPS_RE = /([.!?]\\s+|^\\s*)(\\p{Ll})/gu;\n\n// Conforms to `text.replace` replacer function interface\nfunction correctCaps(_match: string, p1: string, p2: string) {\n  return p1 + p2.toUpperCase();\n}\n\n/**\n * Tries to correct capitalization of the first words of sentences.\n *\n * This automatically capitalizes the first letter of the first word\n * following a sentence-ending punctuation mark.\n */\nexport function capitalizationCleanup(text: string): string {\n  return text.replace(INCORRECT_CAPS_RE, correctCaps);\n}\n\nconst VISUAL_LINE_BREAK_RE = /\\\\(\\r?\\n|\\r)[ \\t]*/g\n\nexport function replaceVisualLineBreaks(text: string): string {\n  return text.replace(VISUAL_LINE_BREAK_RE, ' ');\n}\n","export interface DocumentSettings {\n  /**\n   * Whether to perform a post-processing step cleaning up whitespace.\n   */\n  whitespaceCleanup?: boolean | null;\n\n  /**\n   * Whether to perform a post-processing step repositioning\n   * punctuation marks according to *some* English grammar rules.\n   */\n  punctuationCleanup?: boolean | null;\n\n  /**\n   * Whether to perform basic capitalization correction for words\n   * following sentence-ending punctuation.\n   */\n  capitalizationCleanup?: boolean | null;\n}\n\nexport interface RenderSettings {\n  /**\n   * The random seed to use for this render.\n   *\n   * Can be any type, as this is fed directly to the `seedrandom`\n   * library, which converts the object to a string and uses that as\n   * the actual seed.\n   */\n  randomSeed?: number | null;\n  /**\n   * Whether to disable `eval` blocks in the document.\n   *\n   * This can be useful for security purposes.\n   */\n  allowEval?: boolean | null;\n}\n\n/**\n * Default settings. These are passed in to the main bml rendering function.\n */\nexport const defaultBMLSettings: DocumentSettings = {\n  whitespaceCleanup: true,\n  punctuationCleanup: true,\n  capitalizationCleanup: true,\n};\n\nexport const defaultRenderSettings: RenderSettings = {\n  randomSeed: null,\n  allowEval: true,\n};\n\n/**\n * Return a new settings object with all the properties defined in newSettings,\n * defaulting to those in originalSettings where absent.\n *\n * If `newSettings` is falsy, return `originalSettings` unmodified.\n */\nexport function mergeSettings<T>(originalSettings: T, newSettings: T | null | undefined): T {\n  return Object.assign({}, originalSettings, newSettings);\n}\n","import { EvalBlock } from './evalBlock';\nimport { AstNode } from './ast';\n\n\nexport type Choice = EvalBlock | AstNode[];\n\n/**\n * An outcome with a weight.\n */\nexport class WeightedChoice {\n  choice: Choice;\n  weight: number | null;\n\n  constructor(choice: Choice, weight: number | null) {\n    this.choice = choice;\n    this.weight = weight;\n  }\n\n  toString(): string {\n    return `WeightedChoice{choice: ${String(this.choice)}, weight: ${this.weight}}`;\n  }\n\n  /* Create a new WeightedChoice object with the same properties as this one. */\n  clone(): WeightedChoice {\n    return new WeightedChoice(this.choice, this.weight);\n  }\n}\n","import * as rand from './rand';\nimport { WeightedChoice } from './weightedChoice';\n\n/**\n * This module is exposed to BML script `eval` blocks in a `bml` object namespace.\n */\n\nexport const api = {\n  WeightedChoice: WeightedChoice,\n  weightedChoose: rand.weightedChoose,\n  randomInt: rand.randomInt,\n  randomFloat: rand.randomFloat\n}\n","export function lineAndColumnOf(str: string, index: number): { line: number, column: number } {\n  if (index > str.length) {\n    throw new Error('charIndex > string.length');\n  }\n  let line = 1;\n  let column = -1;\n  let newLine = false;\n  for (let i = 0; i <= index; i++) {\n    if (newLine) {\n      line++;\n      column = 0;\n      newLine = false;\n    } else {\n      column++;\n    }\n    if (str[i] === '\\n') {\n      newLine = true;\n    }\n  }\n  return { line: line, column: column };\n}\n\nexport function lineColumnString(str: string, index: number): string {\n  let lineAndColumn = lineAndColumnOf(str, index);\n  return 'line: ' + lineAndColumn.line + ', column: ' + lineAndColumn.column;\n}\n\nexport function isWhitespace(str: string): boolean {\n  return str.trim() === '';\n}\n\nexport function isStr(obj: any): obj is string {\n  return obj instanceof String || typeof obj === \"string\";\n}\n","import * as stringUtils from './stringUtils';\n\nexport class IllegalStateError extends Error {\n  constructor(message: string) {\n    super(message + ' This is a bug. Please report at https://github.com/ajyoon/bml/issues');\n    this.name = 'IllegalStateError';\n    Object.setPrototypeOf(this, IllegalStateError.prototype);\n  }\n}\n\nexport class JavascriptSyntaxError extends Error {\n  constructor(bmlDoc: string, errorIndex: number) {\n    let message = 'Syntax error found while parsing bml javascript at '\n      + stringUtils.lineColumnString(bmlDoc, errorIndex);\n    super(message);\n    this.name = 'JavascriptSyntaxError';\n    Object.setPrototypeOf(this, JavascriptSyntaxError.prototype);\n  }\n}\n\nexport class BMLSyntaxError extends Error {\n  constructor(message: string | null, bmlDoc: string, errorIndex: number) {\n    let resolvedMsg = (message || 'Syntax error found while parsing bml') +\n      ' at ' + stringUtils.lineColumnString(bmlDoc, errorIndex);\n    super(resolvedMsg);\n    this.name = 'BMLSyntaxError';\n    Object.setPrototypeOf(this, BMLSyntaxError.prototype);\n  }\n}\n\nexport class BMLDuplicatedRefIndexError extends Error {\n  constructor(refIdentifier: string, choiceIndex: number, bmlDoc: string, errorIndex: number) {\n    let msg = `Duplicated reference index ${choiceIndex} for reference ${refIdentifier} `\n      + `at ${stringUtils.lineColumnString(bmlDoc, errorIndex)}`;\n    super(msg);\n    this.name = 'BMLDuplicatedRefIndexError';\n    Object.setPrototypeOf(this, BMLDuplicatedRefIndexError.prototype);\n  }\n}\n\nexport class BMLDuplicatedRefError extends Error {\n  constructor(refIdentifier: string, bmlDoc: string, errorIndex: number) {\n    let msg = `Duplicated reference ${refIdentifier} `\n      + `at ${stringUtils.lineColumnString(bmlDoc, errorIndex)}`;\n    super(msg);\n    this.name = 'BMLDuplicatedRefError';\n    Object.setPrototypeOf(this, BMLDuplicatedRefError.prototype);\n  }\n}\n\nexport class EvalBoundSettingsError extends Error {\n  constructor(field: string, value: any) {\n    super(`Eval binding of settings field '${field}' of '${value}' is invalid`)\n    this.name = 'EvalBoundSettingsError';\n    Object.setPrototypeOf(this, EvalBoundSettingsError.prototype);\n  }\n}\n\nexport class EvalBindingError extends Error {\n  constructor(key: string) {\n    super(`Eval binding ${key} was bound multiple times.`)\n    this.name = 'EvalBindingError';\n    Object.setPrototypeOf(this, EvalBindingError.prototype);\n  }\n}\n\nexport class EvalDisabledError extends Error {\n  constructor() {\n    super(`This document includes eval blocks and cannot be rendered with allowEval=false.`)\n    this.name = 'EvalDisabledError';\n    Object.setPrototypeOf(this, EvalDisabledError.prototype);\n  }\n}\n","import { DocumentSettings } from './settings';\nimport { EvalBoundSettingsError } from './errors';\n\n\nfunction nullOrUndefined<T>(object: T | undefined | null): object is T {\n  return <T>object === undefined || <T>object === null;\n}\n\nexport type UserDefs = { [index: string]: any };\n\nfunction validateSettingField(settings: UserDefs, field: string, expectedType: string) {\n  const value = settings[field];\n  if (!nullOrUndefined(value) && typeof value !== expectedType) {\n    throw new EvalBoundSettingsError('setting.' + field, value);\n  }\n}\n\nexport function validateUserDefs(userDefs: UserDefs) {\n  let settings = userDefs['settings'];\n  if (settings) {\n    validateSettingField(settings, 'whitespaceCleanup', 'boolean');\n    validateSettingField(settings, 'punctuationCleanup', 'boolean');\n    validateSettingField(settings, 'capitalizationCleanup', 'boolean');\n  }\n}\n","import * as evalApi from './evalApi';\nimport { UserDefs, validateUserDefs } from './userDefs';\nimport { EvalBindingError } from './errors';\n\nconst evalFuncTemplate = `\n  const bml = this;\n\n  const __new_bindings = {};\n\n  function bind(obj) {\n    for (let key in obj) {\n      __new_bindings[key] = obj[key];\n    }\n\n  }\n\n  ***USER DEFS BINDING SLOT***\n\n\n  function insert(str) {\n    __context.output += str;\n  }\n\n  ////////// start user code\n\n  ***USER CODE SLOT***\n\n  ////////// end user code\n\n  ***SAVE USER MUTATIONS SLOT***\n\n  return __new_bindings;\n`;\n\n\nexport type EvalContext = {\n  bindings: UserDefs;\n  output: string;\n}\n\n\nexport class EvalBlock {\n  contents: string;\n\n  constructor(contents: string) {\n    this.contents = contents;\n  }\n\n  toString(): string {\n    return `EvalBlock('${this.contents}')`;\n  }\n\n  generateBindingCode(userDefs: UserDefs): string {\n    let lines = [];\n    if (userDefs.settings) {\n      lines.push('let settings = __context.bindings.settings;');\n    }\n    for (let key in userDefs) {\n      lines.push(`let ${key} = __context.bindings.${key}`)\n    }\n    return lines.join('\\n');\n  }\n\n  generateSaveUserMutationsCode(userDefs: UserDefs): string {\n    let lines = [];\n    if (userDefs.settings) {\n      lines.push('__context.bindings.settings = settings;');\n    }\n    for (let key in userDefs) {\n      lines.push(`__context.bindings.${key} = ${key};`)\n    }\n    return lines.join('\\n');\n  }\n\n  toFunc(userDefs: UserDefs): Function {\n    let funcSrc = evalFuncTemplate.replace('***USER CODE SLOT***', this.contents);\n    funcSrc = funcSrc.replace('***USER DEFS BINDING SLOT***',\n      this.generateBindingCode(userDefs));\n    funcSrc = funcSrc.replace('***SAVE USER MUTATIONS SLOT***',\n      this.generateSaveUserMutationsCode(userDefs));\n    let funcContext = Object.assign({}, evalApi.api);\n    return new Function('__context', funcSrc).bind(funcContext);\n  }\n\n  /*\n   * Execution results are stored in the passed-in context\n   */\n  execute(context: EvalContext) {\n    let newBindings = this.toFunc(context.bindings)(context);\n    validateUserDefs(newBindings);\n    for (let [key, value] of Object.entries(newBindings)) {\n      if (context.bindings.hasOwnProperty(key)) {\n        throw new EvalBindingError(key);\n      }\n      context.bindings[key] = value;\n    }\n  }\n}\n\n","export enum TokenType {\n  WHITESPACE = 'WHITESPACE',\n  NEW_LINE = 'NEW_LINE',\n  VISUAL_NEW_LINE = 'VISUAL_NEW_LINE',\n  COMMENT = 'COMMENT',\n  OPEN_BLOCK_COMMENT = 'OPEN_BLOCK_COMMENT',\n  CLOSE_BLOCK_COMMENT = 'CLOSE_BLOCK_COMMENT',\n  SLASH = 'SLASH',\n  SINGLE_QUOTE = 'SINGLE_QUOTE',\n  DOUBLE_QUOTE = 'DOUBLE_QUOTE',\n  BACKTICK = 'BACKTICK',\n  OPEN_PAREN = 'OPEN_PAREN',\n  CLOSE_PAREN = 'CLOSE_PAREN',\n  OPEN_BRACE = 'OPEN_BRACE',\n  CLOSE_BRACE = 'CLOSE_BRACE',\n  OPEN_BRACKET = 'OPEN_BRACKET',\n  CLOSE_BRACKET = 'CLOSE_BRACKET',\n  COMMA = 'COMMA',\n  COLON = 'COLON',\n  AT = 'AT',\n  ARROW = 'ARROW',\n  NUMBER = 'NUMBER',\n  TEXT = 'TEXT',\n}\n","import { WeightedChoice, Choice } from './weightedChoice'\nimport {\n  normalizeWeights,\n  weightedChoose\n} from './rand';\n\nexport type ChoiceForkCallResult = {\n  replacement: Choice,\n  choiceIndex: number\n}\n\nexport class ChoiceFork {\n  weights: WeightedChoice[];\n  identifier: string | null;\n  isSilent: boolean;\n\n  constructor(weights: WeightedChoice[], identifier: string | null, isSilent: boolean) {\n    this.weights = normalizeWeights(weights);\n    this.identifier = identifier;\n    this.isSilent = isSilent;\n  }\n\n  /**\n   * returns an object of the form {replacement: String, choiceIndex: Int}\n   */\n  call(): ChoiceForkCallResult {\n    let result = weightedChoose(this.weights);\n    return { replacement: result.choice, choiceIndex: result.choiceIndex };\n  }\n\n  toString(): string {\n    return `ChoiceFork{weights: ${this.weights}, `\n      + `identifier: ${this.identifier}, isSilent: ${this.isSilent}}`;\n  }\n}\n","import { Choice, WeightedChoice } from './weightedChoice';\nimport { ChoiceFork } from './choiceFork';\n\nexport type ReferenceMap = Map<number, Choice>;\n\nexport class Reference {\n\n  id: string;\n  referenceMap: ReferenceMap;\n  fallbackChoiceFork: ChoiceFork | null;\n\n  constructor(id: string, choiceMap: ReferenceMap, fallbackChocies: WeightedChoice[]) {\n    this.id = id;\n    this.referenceMap = choiceMap;\n    if (fallbackChocies.length) {\n      this.fallbackChoiceFork = new ChoiceFork(fallbackChocies, null, false);\n    } else {\n      this.fallbackChoiceFork = null;\n    }\n  }\n}\n","import { EvalBlock } from './evalBlock';\nimport { WeightedChoice } from './weightedChoice';\nimport { Lexer } from './lexer';\nimport { TokenType } from './tokenType';\nimport { ChoiceFork } from './choiceFork';\nimport { Reference } from './reference';\nimport {\n  IllegalStateError,\n  JavascriptSyntaxError,\n  BMLSyntaxError,\n  BMLDuplicatedRefIndexError,\n} from './errors';\nimport { AstNode } from './ast';\nimport { isStr } from './stringUtils';\n\n\n/**\n * Parse an `eval` block\n *\n * @param lexer - A lexer whose next token is OPEN_BRACKET. This will be\n *     mutated in place such that when the method returns, the lexer's\n *     next token will be after the closing bracket of the block.\n *\n * @return The string of Javascript code extracted from the eval block\n *\n * @throws {JavascriptSyntaxError} If the javascript snippet inside the eval\n *     block contains a syntax error which makes parsing it impossible.\n */\nexport function parseEval(lexer: Lexer): EvalBlock {\n  if (lexer.next()?.tokenType !== TokenType.OPEN_BRACKET) {\n    throw new IllegalStateError('parseEval started with non-OPEN_BRACKET');\n  }\n\n  let state = 'code';\n  let index = lexer.index;\n  let startIndex = index;\n  let openBracketCount = 1;\n  let token;\n  while ((token = lexer.next()) !== null) {\n    switch (state) {\n      case 'block comment':\n        if (token.tokenType === TokenType.CLOSE_BLOCK_COMMENT) {\n          state = 'code';\n        }\n        break;\n      case 'inline comment':\n        if (token.tokenType === TokenType.NEW_LINE) {\n          state = 'code';\n        }\n        break;\n      case 'template literal':\n        if (token.tokenType === TokenType.BACKTICK) {\n          state = 'code';\n        }\n        break;\n      case 'single-quote string':\n        if (token.tokenType === TokenType.SINGLE_QUOTE) {\n          state = 'code';\n        } else if (token.tokenType === TokenType.NEW_LINE) {\n          throw new JavascriptSyntaxError(lexer.str, lexer.index);\n        }\n        break;\n      case 'double-quote string':\n        if (token.tokenType === TokenType.DOUBLE_QUOTE) {\n          state = 'code';\n        } else if (token.tokenType === TokenType.NEW_LINE) {\n          throw new JavascriptSyntaxError(lexer.str, lexer.index);\n        }\n        break;\n      case 'regexp literal':\n        if (token.tokenType === TokenType.SLASH) {\n          state = 'code';\n        }\n        break;\n      case 'code':\n        switch (token.tokenType) {\n          case TokenType.OPEN_BRACKET:\n            openBracketCount++;\n            break;\n          case TokenType.CLOSE_BRACKET:\n            openBracketCount--;\n            if (openBracketCount < 1) {\n              let source = lexer.str.slice(startIndex, lexer.index - 1);\n              return new EvalBlock(source);\n            }\n            break;\n          case TokenType.COMMENT:\n            state = 'inline comment';\n            break;\n          case TokenType.OPEN_BLOCK_COMMENT:\n            state = 'block comment';\n            break;\n          case TokenType.BACKTICK:\n            state = 'template literal';\n            break;\n          case TokenType.SINGLE_QUOTE:\n            state = 'single-quote string';\n            break;\n          case TokenType.DOUBLE_QUOTE:\n            state = 'double-quote string';\n            break;\n          case TokenType.SLASH:\n            state = 'regexp literal';\n            break;\n          default:\n          // pass over..\n        }\n        break;\n      default:\n        throw new Error(`Invalid state: ${state}`);\n    }\n  }\n  throw new JavascriptSyntaxError('could not find end of javascript code block',\n    startIndex);\n}\n\n/**\n * The main function for parsing {} blocks.\n *\n * Expects the lexer's previous token to be the opening curly brace,\n * and the next token whatever comes next.\n */\nexport function parseFork(lexer: Lexer): ChoiceFork | Reference {\n  let startIndex = lexer.index;\n\n  let mappedChoices = new Map();\n  let unmappedChoices: WeightedChoice[] = [];\n\n  let idRe = /([@#]?)(\\w+):?/y;\n\n  let id = null;\n  let isReference = false;\n  let isSilent = false;\n\n  let acceptId = true;\n  let acceptWeight = false;\n  let acceptChoiceIndex = false;\n  let acceptArrow = false;\n  let acceptReplacement = true;\n  let acceptComma = false;\n  let acceptBlockEnd = true;\n\n  let currentChoiceIndexes = [];\n  let currentReplacement = null;\n  let token;\n\n  while ((token = lexer.peek()) !== null) {\n    switch (token.tokenType) {\n      case TokenType.WHITESPACE:\n      case TokenType.NEW_LINE:\n        break;\n      case TokenType.NUMBER:\n        if (acceptChoiceIndex) {\n          acceptChoiceIndex = false;\n          acceptArrow = true;\n          acceptComma = true;\n          currentChoiceIndexes.push(Number(token.str));\n        } else if (acceptWeight) {\n          acceptWeight = false;\n          acceptComma = true;\n          acceptBlockEnd = true;\n          unmappedChoices[unmappedChoices.length - 1].weight = Number(token.str);\n        } else {\n          throw new BMLSyntaxError('Unexpected number in fork',\n            lexer.str, token.index);\n        }\n        break;\n      case TokenType.ARROW:\n        if (acceptArrow) {\n          acceptArrow = false;\n          acceptReplacement = true;\n          acceptComma = false;\n        } else {\n          throw new BMLSyntaxError('Unexpected arrow in fork',\n            lexer.str, token.index);\n        }\n        break;\n      case TokenType.OPEN_PAREN:\n      case TokenType.OPEN_BRACKET:\n      case TokenType.OPEN_BRACE:\n        if (acceptReplacement) {\n          acceptChoiceIndex = false;\n          if (token.tokenType === TokenType.OPEN_PAREN) {\n            lexer.next();\n            currentReplacement = parseDocument(lexer, false);\n          } else if (token.tokenType === TokenType.OPEN_BRACKET) {\n            currentReplacement = parseEval(lexer);\n          } else {\n            lexer.next();\n            currentReplacement = [parseFork(lexer)];\n          }\n          if (currentChoiceIndexes.length) {\n            for (let choiceIndex of currentChoiceIndexes) {\n              if (mappedChoices.has(choiceIndex)) {\n                // it's not ideal to validate this here, but with the way it's currently\n                // built, if we don't it will just silently overwrite the key\n                throw new BMLDuplicatedRefIndexError(\n                  id!, choiceIndex, lexer.str, token.index);\n              }\n              mappedChoices.set(choiceIndex, currentReplacement);\n            }\n            // Reset state for next choice\n            acceptReplacement = false;\n            acceptComma = true;\n            acceptBlockEnd = true;\n            currentChoiceIndexes = [];\n            currentReplacement = null;\n          } else {\n            // Since there is no current choice index, this must be an unmapped choice\n            unmappedChoices.push(new WeightedChoice(currentReplacement, null));\n            acceptReplacement = false;\n            acceptComma = true;\n            acceptWeight = true;\n            acceptBlockEnd = true;\n          }\n        } else {\n          throw new BMLSyntaxError('Unexpected replacement in fork',\n            lexer.str, token.index);\n        }\n        continue;\n      case TokenType.COMMA:\n        if (acceptComma) {\n          acceptComma = false;\n          acceptChoiceIndex = true;\n          if (!acceptArrow) {\n            acceptReplacement = true;\n          }\n        } else {\n          throw new BMLSyntaxError('Unexpected comma in fork',\n            lexer.str, token.index);\n        }\n        break;\n      case TokenType.CLOSE_BRACE:\n        if (acceptBlockEnd) {\n          lexer.next();  // consume close brace\n          if (isReference) {\n            return new Reference(id!, mappedChoices, unmappedChoices);\n          } else {\n            return new ChoiceFork(unmappedChoices, id, isSilent)\n          }\n        } else {\n          throw new BMLSyntaxError('Unexpected close brace in fork',\n            lexer.str, token.index);\n        }\n      case TokenType.TEXT:\n      case TokenType.AT:\n        if (acceptId) {\n          idRe.lastIndex = lexer.index;\n          let idMatch = idRe.exec(lexer.str);\n          if (!idMatch) {\n            throw new BMLSyntaxError(`Unexpected token ${token}`,\n              lexer.str, token.index);\n          }\n          let typeSlug = idMatch[1];\n          id = idMatch[2];\n          if (typeSlug == '@') {\n            isReference = true;\n            acceptChoiceIndex = true;\n          } else if (typeSlug == '#') {\n            isSilent = true;\n          }\n          lexer.overrideIndex(lexer.index + idMatch[0].length);\n          acceptId = false;\n          continue;\n        } else {\n          throw new BMLSyntaxError(`Unexpected token ${token}`,\n            lexer.str, token.index);\n        }\n      default:\n        throw new BMLSyntaxError(`Unexpected token ${token}`,\n          lexer.str, token.index);\n    }\n    // If we haven't broken out or thrown an error by now, consume this token.\n    lexer.next();\n  }\n  throw new BMLSyntaxError('Could not find end of fork.',\n    lexer.str, startIndex);\n}\n\n\n/**\n * Parse a literal block expressed with double-brackets\n *\n * Expects the lexer's next token to be the second opening bracket.\n * Upon returning, the lexer's next token is the one right after the final closing bracket.\n */\nexport function parseLiteralBlock(lexer: Lexer): string {\n  let blockStartIndex = lexer.index - 1;\n  if (lexer.next()?.tokenType !== TokenType.OPEN_BRACKET) {\n    throw new IllegalStateError('parseLiteralBlock started with non-OPEN_BRACKET');\n  }\n  let token;\n  let result = '';\n  while ((token = lexer.next()) !== null) {\n    switch (token.tokenType) {\n      case TokenType.CLOSE_BRACKET:\n        if (lexer.peek()?.tokenType == TokenType.CLOSE_BRACKET) {\n          lexer.next();\n          return result;\n        }\n      default:\n        result += token.str;\n    }\n  }\n  throw new BMLSyntaxError('Could not find end of literal block', lexer.str, blockStartIndex);\n}\n\n/**\n * The top-level (or recursively called) parsing function. Returns an AST.\n *\n * If being recursively called, isTopLevel should be false and the\n * lexer's previous token should be an OPEN_PAREN.\n */\nexport function parseDocument(lexer: Lexer, isTopLevel: boolean): AstNode[] {\n  let startIndex = lexer.index;\n  let token;\n  let openParenCount = 1;\n  let astNodes: AstNode[] = [];\n\n  function pushString(str: string) {\n    // To keep the AST more compact, sequential string nodes are joined together.\n    if (!astNodes.length) {\n      astNodes.push(str);\n      return;\n    }\n    let lastNode = astNodes[astNodes.length - 1];\n    if (isStr(lastNode)) {\n      astNodes[astNodes.length - 1] = lastNode.concat(str);\n    } else {\n      astNodes.push(str);\n    }\n  }\n\n  while ((token = lexer.next()) !== null) {\n    switch (token.tokenType) {\n      case TokenType.OPEN_PAREN:\n        openParenCount++;\n        break;\n      case TokenType.CLOSE_PAREN:\n        openParenCount--;\n        if (openParenCount < 1) {\n          return astNodes;\n        }\n        break;\n      case TokenType.OPEN_BRACKET:\n        if (lexer.peek()?.tokenType == TokenType.OPEN_BRACKET) {\n          pushString(parseLiteralBlock(lexer));\n        } else {\n          pushString(token.str);\n        }\n        break;\n      case TokenType.OPEN_BRACE:\n        let fork = parseFork(lexer);\n        astNodes = astNodes.concat(fork);\n        break;\n      default:\n        // Any other input is treated as a string\n        pushString(token.str);\n    }\n  }\n  if (!isTopLevel) {\n    throw new BMLSyntaxError(`Reached end of document while parsing string.`,\n      lexer.str, startIndex)\n  }\n  return astNodes;\n}\n","import { TokenType } from './tokenType';\n\nexport class Token {\n\n  tokenType: TokenType;\n  /** Index of the first character of this token in the string */\n  index: number;\n  /** Index after the last character of this token in the string (exclusive bound) */\n  endIndex: number;\n  /**\n   * Output string for the token.\n   *\n   * This may not always be the same as the input text consumed by the token.\n   * For example, escape sequences like `\\{` will have `token.str === '{'`.\n   */\n  str: string;\n\n  constructor(tokenType: TokenType, index: number, endIndex: number, str: string) {\n    this.tokenType = tokenType;\n    this.index = index;\n    this.endIndex = endIndex;\n    this.str = str;\n  }\n\n  toString(): string {\n    return `Token{tokenType: ${this.tokenType}, index: ${this.index}, `\n      + `endIndex: ${this.endIndex}, string: '${this.str}'}`;\n  }\n}\n","import { Token } from './token';\nimport { TokenType } from './tokenType';\n\nconst ANY_WHITESPACE_RE = /\\s/;\n\nexport class Lexer {\n\n  str: string;\n  index: number;\n  private _cachedNext: Token | null = null;\n  private _newLineRe: RegExp = /\\r?\\n/y;\n  private _whitespaceRe: RegExp = /[^\\S\\r\\n]+/y;  // non-newline whitespace\n  private _numberRe: RegExp = /(\\d+(\\.\\d+)?)|(\\.\\d+)/y;\n\n  constructor(str: string) {\n    this.str = str;\n    this.index = 0;\n  }\n\n  /**\n   * Set this.index and invalidate the next-token cache\n   */\n  overrideIndex(newIndex: number) {\n    this._cachedNext = null;\n    this.index = newIndex;\n  }\n\n  /**\n   * Determine the next item in the token stream\n   */\n  _determineNextRaw(): Token | null {\n    if (this.index >= this.str.length) {\n      return null;\n    }\n    let tokenType;\n    let tokenIndex = this.index;\n    let tokenEndIndex = null;\n    let tokenString;\n    this._newLineRe.lastIndex = this.index;\n    this._whitespaceRe.lastIndex = this.index;\n    this._numberRe.lastIndex = this.index;\n    let newLineMatch = this._newLineRe.exec(this.str);\n    let whitespaceMatch = this._whitespaceRe.exec(this.str);\n    let numberMatch = this._numberRe.exec(this.str);\n    if (newLineMatch !== null) {\n      tokenType = TokenType.NEW_LINE;\n      tokenString = newLineMatch[0];\n    } else if (whitespaceMatch !== null) {\n      tokenType = TokenType.WHITESPACE;\n      tokenString = whitespaceMatch[0];\n    } else if (numberMatch !== null) {\n      tokenType = TokenType.NUMBER;\n      tokenString = numberMatch[0];\n    } else if (this.str.slice(this.index, this.index + 2) === '//') {\n      tokenType = TokenType.COMMENT;\n      tokenString = '//';\n    } else if (this.str.slice(this.index, this.index + 2) === '/*') {\n      tokenType = TokenType.OPEN_BLOCK_COMMENT;\n      tokenString = '/*';\n    } else if (this.str.slice(this.index, this.index + 2) === '*/') {\n      tokenType = TokenType.CLOSE_BLOCK_COMMENT;\n      tokenString = '*/';\n    } else if (this.str[this.index] === '/') {\n      tokenType = TokenType.SLASH;\n      tokenString = '/';\n    } else if (this.str[this.index] === '\\'') {\n      tokenType = TokenType.SINGLE_QUOTE;\n      tokenString = '\\'';\n    } else if (this.str[this.index] === '\"') {\n      tokenType = TokenType.DOUBLE_QUOTE;\n      tokenString = '\"';\n    } else if (this.str[this.index] === '`') {\n      tokenType = TokenType.BACKTICK;\n      tokenString = '`';\n    } else if (this.str[this.index] === '(') {\n      tokenType = TokenType.OPEN_PAREN;\n      tokenString = '(';\n    } else if (this.str[this.index] === ')') {\n      tokenType = TokenType.CLOSE_PAREN;\n      tokenString = ')';\n    } else if (this.str[this.index] === '{') {\n      tokenType = TokenType.OPEN_BRACE;\n      tokenString = '{';\n    } else if (this.str[this.index] === '}') {\n      tokenType = TokenType.CLOSE_BRACE;\n      tokenString = '}';\n    } else if (this.str[this.index] === ',') {\n      tokenType = TokenType.COMMA;\n      tokenString = ',';\n    } else if (this.str[this.index] === ':') {\n      tokenType = TokenType.COLON;\n      tokenString = ':';\n    } else if (this.str[this.index] === '@') {\n      tokenType = TokenType.AT;\n      tokenString = '@';\n    } else if (this.str[this.index] === '[') {\n      tokenType = TokenType.OPEN_BRACKET;\n      tokenString = '[';\n    } else if (this.str[this.index] === ']') {\n      tokenType = TokenType.CLOSE_BRACKET;\n      tokenString = ']';\n    } else if (this.str.slice(this.index, this.index + 2) === '->') {\n      tokenType = TokenType.ARROW;\n      tokenString = '->';\n    } else {\n      tokenType = TokenType.TEXT;\n      if (this.str[this.index] === '\\\\') {\n        let nextChar = this.str[this.index + 1];\n        if ('\\\\/[{])'.includes(nextChar)) {\n          tokenEndIndex = this.index + 2;\n          tokenString = nextChar;\n        } else if (nextChar === 'n') {\n          tokenEndIndex = this.index + 2;\n          tokenString = '\\n';\n        } else if (nextChar === 't') {\n          tokenEndIndex = this.index + 2;\n          tokenString = '\\t';\n        } else if (nextChar === 'r') {\n          tokenEndIndex = this.index + 2;\n          tokenString = '\\r';\n        } else {\n          tokenString = '\\\\';\n        }\n      } else {\n        tokenString = this.str[this.index];\n      }\n    }\n\n    if (tokenEndIndex === null) {\n      tokenEndIndex = tokenIndex + tokenString.length;\n    }\n    let token = new Token(tokenType, tokenIndex, tokenEndIndex, tokenString);\n    return token;\n  }\n\n  _determineNextReal(): Token | null {\n    let inLineComment = false;\n    let inBlockComment = false;\n    let token;\n    let startIndex = this.index;\n\n    while ((token = this._determineNextRaw()) !== null) {\n      if (inLineComment) {\n        if (token.tokenType === TokenType.NEW_LINE) {\n          inLineComment = false;\n          return new Token(TokenType.NEW_LINE, token.index, token.endIndex, token.str);\n        }\n      } else if (inBlockComment) {\n        if (token.tokenType === TokenType.CLOSE_BLOCK_COMMENT) {\n          // Block comments output a single whitespace positioned at\n          // the closing slash of the `*/`\n          let virtualSpaceIdx = token.index + 1;\n          return new Token(TokenType.WHITESPACE, virtualSpaceIdx, virtualSpaceIdx + 1, ' ');\n        }\n      } else {\n        if (token.tokenType === TokenType.COMMENT) {\n          // Use some hacky checks to work around lack of lookbehind\n          // and elegant lookahead.\n          let commentFollowedByWhitespace = token.index >= this.str.length\n            || ANY_WHITESPACE_RE.test(this.str[token.endIndex]);\n          let commentPrecededByWhitespace = token.index === 0\n            || ANY_WHITESPACE_RE.test(this.str[token.index - 1]);\n          if (commentPrecededByWhitespace || commentFollowedByWhitespace) {\n            inLineComment = true;\n          } else {\n            // If line comment isn't preceded or followed by whitespace,\n            // emit a TEXT token for it instead.\n            return new Token(TokenType.TEXT, token.index, token.endIndex, token.str);\n          }\n        } else if (token.tokenType === TokenType.OPEN_BLOCK_COMMENT) {\n          inBlockComment = true;\n        } else {\n          this.index = startIndex;\n          return token;\n        }\n      }\n      // Determining the next real token currently requires\n      // fake-consuming tokens until a real one is found.  It's a bad\n      // hack, but `this.index` should be reset to the initial\n      // position before this function exits.\n      this.index = token.endIndex;\n    }\n    this.index = startIndex;\n    return null;\n  }\n\n  next(): Token | null {\n    let token;\n    if (this._cachedNext !== null) {\n      token = this._cachedNext;\n      this._cachedNext = null;\n    } else {\n      token = this._determineNextReal();\n    }\n    if (token !== null) {\n      this.index = token.endIndex;\n    } else {\n      this.index = this.str.length;\n    }\n    return token;\n  }\n\n  peek(): Token | null {\n    if (this._cachedNext !== null) {\n      return this._cachedNext;\n    }\n    let token = this._determineNextReal();\n    this._cachedNext = token;\n    return token;\n  }\n\n  nextSatisfying(predicate: (a: Token) => boolean): Token | null {\n    let token;\n    while ((token = this.next()) !== null) {\n      if (predicate(token)) {\n        return token;\n      }\n    }\n    return null;\n  }\n\n  nextNonWhitespace(): Token | null {\n    return this.nextSatisfying((t) =>\n      (t.tokenType !== TokenType.WHITESPACE && t.tokenType !== TokenType.NEW_LINE));\n  }\n}\n","import * as rand from './rand';\nimport * as postprocessing from './postprocessing';\nimport { defaultBMLSettings, defaultRenderSettings, mergeSettings, RenderSettings } from './settings';\nimport { Reference } from './reference';\nimport { parseDocument } from './parsers';\nimport { AstNode } from './ast';\nimport { Lexer } from './lexer';\nimport { ChoiceFork } from './choiceFork';\nimport { Choice } from './weightedChoice';\nimport { isStr } from './stringUtils';\nimport { EvalDisabledError } from './errors';\nimport { EvalContext } from './evalBlock';\n\n\nexport type ChoiceResult = { choiceIndex: number, renderedOutput: string };\nexport type ChoiceResultMap = Map<string, ChoiceResult>;\n\n/**\n * A helper class for rendering an AST.\n *\n * This is meant to be used only once per render.\n */\nclass Renderer {\n\n  settings: RenderSettings;\n  choiceResultMap: ChoiceResultMap;\n  evalContext: EvalContext;\n\n  constructor(settings: RenderSettings) {\n    this.settings = settings;\n    this.choiceResultMap = new Map();\n    this.evalContext = { bindings: {}, output: '' };\n  }\n\n  resolveReference(reference: Reference): Choice {\n    let referredChoiceResult = this.choiceResultMap.get(reference.id);\n    if (referredChoiceResult) {\n      if (!reference.referenceMap.size && !reference.fallbackChoiceFork) {\n        // this is a special \"copy\" backref\n        return [referredChoiceResult.renderedOutput];\n      }\n      let matchedReferenceResult = reference.referenceMap.get(referredChoiceResult.choiceIndex);\n      if (matchedReferenceResult !== undefined) {\n        return matchedReferenceResult;\n      }\n    }\n    if (!reference.fallbackChoiceFork) {\n      console.warn(`No matching reference or fallback found for ${reference.id}`);\n      return [''];\n    }\n    return reference.fallbackChoiceFork.call().replacement;\n  }\n\n  renderChoice(choice: Choice): string {\n    if (choice instanceof Array) {\n      return this.renderAst(choice);\n    } else {\n      if (!this.settings.allowEval) {\n        throw new EvalDisabledError();\n      }\n      choice.execute(this.evalContext);\n      let output = this.evalContext.output;\n      this.evalContext.output = '';\n      return output;\n    }\n  }\n\n  renderAst(ast: AstNode[]): string {\n    let output = '';\n    for (let i = 0; i < ast.length; i++) {\n      let node = ast[i];\n      if (isStr(node)) {\n        output += node;\n      } else if (node instanceof ChoiceFork) {\n        let { replacement, choiceIndex } = node.call();\n        let renderedOutput = this.renderChoice(replacement);\n        if (node.isSilent) {\n          if (output.length && output[output.length - 1] == '\\n') {\n            // This silent fork started a new line.\n            // If the next character is also a newline, skip it.\n            let nextNode = i < ast.length - 1 ? (ast[i + 1]) : null;\n            if (isStr(nextNode)) {\n              if (nextNode.startsWith('\\n')) {\n                ast[i + 1] = nextNode.slice(1);\n              } else if (nextNode.startsWith('\\r\\n')) {\n                ast[i + 1] = nextNode.slice(2);\n              }\n            }\n          }\n        } else {\n          output += renderedOutput;\n        }\n        if (node.identifier) {\n          this.choiceResultMap.set(node.identifier, { choiceIndex, renderedOutput })\n        }\n      } else {\n        let backRefResult = this.resolveReference(node);\n        output += this.renderChoice(backRefResult);\n      }\n    }\n    return output;\n  }\n\n  postprocess(text: string): string {\n    let documentSettings = mergeSettings(\n      defaultBMLSettings, this.evalContext.bindings.settings);\n    let output = text;\n    output = postprocessing.replaceVisualLineBreaks(output);\n    if (documentSettings.punctuationCleanup) {\n      output = postprocessing.punctuationCleanup(output);\n    }\n    if (documentSettings.capitalizationCleanup) {\n      output = postprocessing.capitalizationCleanup(output);\n    }\n    if (documentSettings.whitespaceCleanup) {\n      output = postprocessing.whitespaceCleanup(output);\n    }\n    return output;\n  }\n\n  renderAndPostProcess(ast: AstNode[]): string {\n    if (this.settings.randomSeed) {\n      rand.setRandomSeed(this.settings.randomSeed);\n    }\n    let renderedText = this.renderAst(ast);\n    return this.postprocess(renderedText);\n  }\n}\n\n\nexport function render(bmlDocumentString: string, renderSettings?: RenderSettings): string {\n  renderSettings = mergeSettings(defaultRenderSettings, renderSettings);\n  let lexer = new Lexer(bmlDocumentString);\n  let ast = parseDocument(lexer, true);\n  return new Renderer(renderSettings).renderAndPostProcess(ast);\n}\n","/* @license BML - BSD 3 Clause License - Source at github.com/ajyoon/bml - Docs at bml-lang.org */\nimport { render } from './renderer';\n\nwindow['bml'] = render;\n"],"names":["global","module1","define1","Alea","seed","me","this","mash","n","data","toString","i","length","h","charCodeAt","Mash","next","t","s0","c","s1","s2","copy","f","impl","opts","xg","state","prng","int32","double","quick","exports","amd","alea","module","define","XorGen","strseed","x","y","z","w","k","result","xor128","v","d","xorwow","X","j","push","init","slice","Date","xorshift7","limit","Math","max","xor4096","b","a","floor","tychei","$gj6Et","parcelRequire","pool","math","nodecrypto","eval","width","rngname","startdenom","pow","significance","overflow","mask","seedrandom","options","callback","key","shortseed","mixkey","flatten","entropy","tostring","out","randomBytes","Uint8Array","crypto","msCrypto","getRandomValues","e","browser","navigator","plugins","screen","autoseed","arc4","ARC4","g","S","pass","is_math_call","keylen","s","count","r","obj","depth","prop","typ","smear","stringseed","String","fromCharCode","apply","random","$fa5d8df011db7ec0$exports","ex","$4gDjz","$HLBv4","$ktaoY","$gBs5C","$ktLSh","$23dd371fa0105bbf$var$rng","$parcel$interopDefault","$f2dae5dda642a89f$exports","$23dd371fa0105bbf$export$a2691b3c66b90a97","weightedChoices","normalized","sum","nullWeightCount","weightedChoice","clone","weight","nullWeight","$23dd371fa0105bbf$export$231d937d7748069","min","$23dd371fa0105bbf$export$3c5f89dae98e900b","ceil","$23dd371fa0105bbf$export$dfb0db305cae9fba","weights","wc","progress","pickedValue","wc1","choice","choiceIndex","console","warn","fallbackIndex","$31958278014cc1d0$var$BLANK_LINE_RE","$31958278014cc1d0$var$TRAILING_WHITESPACE_RE","$31958278014cc1d0$var$MISPLACED_WORD_ENDING_PUNC_RE","$31958278014cc1d0$var$INCORRECT_CAPS_RE","$31958278014cc1d0$var$correctCaps","_match","p1","p2","toUpperCase","$31958278014cc1d0$var$VISUAL_LINE_BREAK_RE","$a3cd9ccef2b1fd6c$export$18e0fb7e055a6ffc","whitespaceCleanup","punctuationCleanup","capitalizationCleanup","$a3cd9ccef2b1fd6c$export$129a826f9bfa0e84","randomSeed","allowEval","$a3cd9ccef2b1fd6c$export$953b8844777cd492","originalSettings","newSettings","Object","assign","$78d9e39c826e6bbd$export$b363a0fb27031153","constructor","$c2835ee42eb40a49$export$644d8ea042df96a6","WeightedChoice","weightedChoose","randomInt","randomFloat","$2173e3b55588bdf3$export$faf796819bf7156f","str","index","lineAndColumn","Error","line","column","newLine","$2173e3b55588bdf3$export$7762a5f1fbaa187f","$2173e3b55588bdf3$export$63cc9d6c11a5a382","$be52afd1406121c4$export$25b19446f82d7080","message","super","name","setPrototypeOf","prototype","$be52afd1406121c4$export$212344d213252f95","bmlDoc","errorIndex","$be52afd1406121c4$export$9bd8738e2696d815","$be52afd1406121c4$export$5f41361166083558","refIdentifier","$be52afd1406121c4$export$5d36dfb58549021f","$be52afd1406121c4$export$b00eb0c7b5e7384f","field","value","$be52afd1406121c4$export$2b8f184bbdc74d8a","$be52afd1406121c4$export$e84e68f1a3f7e062","$67b5769a2e5b6e40$var$validateSettingField","settings","expectedType","object","$67b5769a2e5b6e40$export$a443a792f3423450","userDefs","$0bc74b15410ab9b7$var$evalFuncTemplate","$0bc74b15410ab9b7$export$c14d55ff8a781168","contents","generateBindingCode","lines","join","generateSaveUserMutationsCode","toFunc","funcSrc","replace","funcContext","Function","bind","execute","context","newBindings","bindings","entries","hasOwnProperty","$c53c14e71ec8b103$export$f435f793048e7a0f","TokenType","$68840703e4e8e9f0$export$d27702c2be747f09","identifier","isSilent","call","replacement","$e85e0028c85965d9$export$e0be378c32fb70a7","id","choiceMap","fallbackChocies","referenceMap","fallbackChoiceFork","$8a47c715e80dd7cc$export$437922f793a69740","lexer","tokenType","OPEN_BRACKET","token","startIndex","openBracketCount","CLOSE_BLOCK_COMMENT","NEW_LINE","BACKTICK","SINGLE_QUOTE","DOUBLE_QUOTE","SLASH","CLOSE_BRACKET","source","COMMENT","OPEN_BLOCK_COMMENT","$8a47c715e80dd7cc$export$47ca0410daecad03","mappedChoices","Map","unmappedChoices","idRe","isReference","acceptId","acceptWeight","acceptChoiceIndex","acceptArrow","acceptReplacement","acceptComma","acceptBlockEnd","currentChoiceIndexes","currentReplacement","peek","WHITESPACE","NUMBER","Number","ARROW","OPEN_PAREN","OPEN_BRACE","$8a47c715e80dd7cc$export$b6a9369736b19f4d","has","set","COMMA","CLOSE_BRACE","TEXT","AT","lastIndex","idMatch","exec","typeSlug","overrideIndex","$8a47c715e80dd7cc$export$94bf5b6a291876d6","blockStartIndex","isTopLevel","openParenCount","astNodes","pushString","lastNode","concat","CLOSE_PAREN","fork","$8b64b6441bb0a3f3$export$50792b0e93539fde","endIndex","$a7fe260e13656a6f$var$ANY_WHITESPACE_RE","$a7fe260e13656a6f$export$6168dc8908a6c652","_cachedNext","_newLineRe","_whitespaceRe","_numberRe","newIndex","_determineNextRaw","tokenString","tokenIndex","tokenEndIndex","newLineMatch","whitespaceMatch","numberMatch","COLON","nextChar","includes","_determineNextReal","inLineComment","inBlockComment","virtualSpaceIdx","commentFollowedByWhitespace","test","nextSatisfying","predicate","nextNonWhitespace","$60ec6aaa2f66c1da$var$Renderer","choiceResultMap","evalContext","output","resolveReference","reference","referredChoiceResult","get","size","renderedOutput","matchedReferenceResult","undefined","renderChoice","Array","renderAst","ast","node","nextNode","startsWith","backRefResult","postprocess","text","documentSettings","$31958278014cc1d0$export$e67922e441e2a8bc","$31958278014cc1d0$export$1a868e5eb4cad577","$31958278014cc1d0$export$e44a900159787abc","atDocStart","lastLineWasBlank","split","isBlank","rewrittenLine","atLineStart","lastCharWasSpace","char","charIsSpace","endsWith","substring","$31958278014cc1d0$export$4d20fe649bca738b","renderAndPostProcess","renderedText","window","bmlDocumentString","renderSettings"],"version":3,"file":"bml.bundle.js.map"}